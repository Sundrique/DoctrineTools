<?php

namespace DoctrineToolsTest\Controller;

use DoctrineToolsTest\Bootstrap;
use Zend\Http\Request;
use Zend\Http\Response;
use Zend\Test\PHPUnit\Controller\AbstractConsoleControllerTestCase;

class ORMControllerTest extends AbstractConsoleControllerTestCase {

	private static $ENTITY_DIR = 'DoctrineTestORM';

	public function setUp() {
		$this->setApplicationConfig(
			include __DIR__ . '/../../TestConfig.php.dist'
		);

		mkdir(self::$ENTITY_DIR);

		parent::setUp();

		$testConfig = $this->getApplicationServiceLocator()->get('Config');
		$testConfig['doctrinetools']['orm']['dir'] = self::$ENTITY_DIR;

		$this->getApplicationServiceLocator()->setAllowOverride(true);
		$this->getApplicationServiceLocator()->setService('Config', $testConfig);
	}

	public function tearDown() {
		self::removeDir(self::$ENTITY_DIR);

		parent::tearDown();
	}

	public function testGenerateActionCanBeAccessed() {
		$this->dispatch('doctrine orm generateEntities');

		$this->assertResponseStatusCode(0);
		$this->assertModuleName('doctrinetools');
		$this->assertControllerName('orm');
		$this->assertControllerClass('ormcontroller');
		$this->assertMatchedRouteName('doctrinetools');
	}

	public function testGetConfigurationFromConfig() {
		$this->dispatch('doctrine orm generateEntities');

		$ormConfig = $this->getController()->getConfiguration();

		$this->assertEquals(self::$ENTITY_DIR, $ormConfig['dir']);
	}

	public function testGetConfigurationFromParams() {
		$this->dispatch(
			'doctrine orm generateEntities'.
			' --dir=' . self::$ENTITY_DIR
		);

		$ormConfig = $this->getController()->getConfiguration();

		$this->assertEquals(self::$ENTITY_DIR, $ormConfig['dir']);
	}

	private static function removeDir($dir) {
		$files = array_diff(scandir($dir), array('.', '..'));
		foreach ($files as $file) {
			(is_dir($dir . '/' . $file)) ? self::removeDir($dir . '/' . $file) : unlink($dir . '/' . $file);
		}
		return rmdir($dir);
	}

	private function getController() {
		$routeMatch = $this->getApplication()->getMvcEvent()->getRouteMatch();
		$controllerIdentifier = $routeMatch->getParam('controller');
		$controllerManager = $this->getApplicationServiceLocator()->get('ControllerLoader');
		return $controllerManager->get($controllerIdentifier);
	}
}